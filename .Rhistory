# STEP 1) MERGE THE TRAINING AND TEST SETS TO CREATE ONE DATA SET.
##############################################################################
trainDataset <- cbind(trainSubjectIDs, trainActivityIDs, trainData)
testDataset <- cbind(testSubjectIDs, testActivityIDs, testData)
fullDataset <- rbind(trainDataset, testDataset)
#}
#run_analysis <- function()
#{
library(plyr)
library(dplyr)
##############################################################################
# STEP 0) READING DATA
##############################################################################
# PART I - READING COMMON DATA (index files for features and activity labels)
dataFolder <- "UCI HAR Dataset"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
featuresIndex <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"))
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"))
#-----------------------------------------------------------------------------
# PART II - READING TRAINING DATA (subject IDs, activity IDs and measurements)
trainSubjectsFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
trainFolder <- file.path(dataFolder, "train")
# List of subject IDs for training data. One subject ID per row.
trainSubjectIDs <- read.table(file.path(trainFolder, trainSubjectsFile),
col.names = "subject")
# List of activity IDs for training data. One activity ID per row.
trainActivityIDs <- read.table(file.path(trainFolder, yTrainFile),
col.names = "activityID")
# Training measurements (the 'core' of the training data).
trainData <- read.table(file.path(trainFolder, trainDataFile),
col.names = featuresIndex$features)
#-----------------------------------------------------------------------------
# PART III - READING TEST DATA (subject IDs, activity IDs and measurements)
testSubjectsFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
testFolder <- file.path(dataFolder, "test")
# List of subject IDs for test data. One subject ID per row.
testSubjectIDs <- read.table(file.path(testFolder, testSubjectsFile),
col.names = "subject")
# List of activity IDs for test data. One activity ID per row.
testActivityIDs <- read.table(file.path(testFolder, yTestFile),
col.names = "activityID")
# Test measurements (the 'core' of the test data).
testData <- read.table(file.path(testFolder, testDataFile),
col.names = featuresIndex$features)
##############################################################################
# STEP 1) MERGE THE TRAINING AND TEST SETS TO CREATE ONE DATA SET.
##############################################################################
trainDataset <- cbind(trainSubjectIDs, trainActivityIDs, trainData)
testDataset <- cbind(testSubjectIDs, testActivityIDs, testData)
fullDataset <- rbind(trainDataset, testDataset)
#}
View(trainActivityIDs)
View(trainDataset)
charmatch("mean()", featuresIndex)
View(featuresIndex)
View(featuresIndex)
charmatch("mean()", featuresIndex$features)
class(featuresIndex$features)
charmatch("mean()", as.character(featuresIndex$features))
x <- as.character(featuresIndex$features)
charmatch("mean()", x)
grep("mean()", x)
View(featuresIndex)
View(featuresIndex)
View(activityIndex)
View(featuresIndex)
View(activityIndex)
featuresIndex <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"))[2]
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"))[2]
View(activityIndex)
View(featuresIndex)
as.character(activityIndex)
activityIndex
class(activityIndex$labels)
as.character(activityIndex$labels)
activityIndex[1]
activityIndex[1,1]
featuresIndex <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"),
stringsAsFactors = FALSE)[2]
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"),
stringsAsFactors = FALSE)[2]
View(activityIndex)
activityIndex[1]
activityIndex
activityIndex[1, 1]
class(activityIndex[1])
class(activityIndex$labels)
#run_analysis <- function()
#{
library(plyr)
library(dplyr)
##############################################################################
# STEP 0) READING DATA
##############################################################################
# PART I - READING COMMON DATA (index files for features and activity labels)
dataFolder <- "UCI HAR Dataset"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
featuresIndex <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"),
stringsAsFactors = FALSE)[2]
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"),
stringsAsFactors = FALSE)[2]
#-----------------------------------------------------------------------------
# PART II - READING TRAINING DATA (subject IDs, activity IDs and measurements)
trainSubjectsFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
trainFolder <- file.path(dataFolder, "train")
# List of subject IDs for training data. One subject ID per row.
trainSubjectIDs <- read.table(file.path(trainFolder, trainSubjectsFile),
col.names = "subject")
# List of activity IDs for training data. One activity ID per row.
trainActivityIDs <- read.table(file.path(trainFolder, yTrainFile),
col.names = "activityID")
# Training measurements (the 'core' of the training data).
trainData <- read.table(file.path(trainFolder, trainDataFile),
col.names = featuresIndex$features)
#-----------------------------------------------------------------------------
# PART III - READING TEST DATA (subject IDs, activity IDs and measurements)
testSubjectsFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
testFolder <- file.path(dataFolder, "test")
# List of subject IDs for test data. One subject ID per row.
testSubjectIDs <- read.table(file.path(testFolder, testSubjectsFile),
col.names = "subject")
# List of activity IDs for test data. One activity ID per row.
testActivityIDs <- read.table(file.path(testFolder, yTestFile),
col.names = "activityID")
# Test measurements (the 'core' of the test data).
testData <- read.table(file.path(testFolder, testDataFile),
col.names = featuresIndex$features)
##############################################################################
# STEP 1) MERGE THE TRAINING AND TEST SETS TO CREATE ONE DATA SET.
##############################################################################
# We don't need to use 'merge()' at all here. A simple 'cbind()' should do the
# trick, since we are only assembling tables.
trainDataset <- cbind(trainSubjectIDs, trainActivityIDs, trainData)
testDataset <- cbind(testSubjectIDs, testActivityIDs, testData)
fullDataset <- rbind(trainDataset, testDataset)
#}
#run_analysis <- function()
#{
library(plyr)
library(dplyr)
##############################################################################
# STEP 0) READING DATA
##############################################################################
# PART I - READING COMMON DATA (index files for features and activity labels)
dataFolder <- "UCI HAR Dataset"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
featuresIndex <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"),
stringsAsFactors = FALSE)[2]
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"),
stringsAsFactors = FALSE)[2]
#-----------------------------------------------------------------------------
# PART II - READING TRAINING DATA (subject IDs, activity IDs and measurements)
trainSubjectsFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
trainFolder <- file.path(dataFolder, "train")
# List of subject IDs for training data. One subject ID per row.
trainSubjectIDs <- read.table(file.path(trainFolder, trainSubjectsFile),
col.names = "subject")
# List of activity IDs for training data. One activity ID per row.
trainActivityIDs <- read.table(file.path(trainFolder, yTrainFile),
col.names = "activityID")
# Training measurements (the 'core' of the training data).
trainData <- read.table(file.path(trainFolder, trainDataFile),
col.names = featuresIndex$features)
#-----------------------------------------------------------------------------
# PART III - READING TEST DATA (subject IDs, activity IDs and measurements)
testSubjectsFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
testFolder <- file.path(dataFolder, "test")
# List of subject IDs for test data. One subject ID per row.
testSubjectIDs <- read.table(file.path(testFolder, testSubjectsFile),
col.names = "subject")
# List of activity IDs for test data. One activity ID per row.
testActivityIDs <- read.table(file.path(testFolder, yTestFile),
col.names = "activityID")
# Test measurements (the 'core' of the test data).
testData <- read.table(file.path(testFolder, testDataFile),
col.names = featuresIndex$features)
##############################################################################
# STEP 1) MERGE THE TRAINING AND TEST SETS TO CREATE ONE DATA SET.
##############################################################################
# We don't need to use 'merge()' at all here. A simple 'cbind()' should do the
# trick, since we are only assembling tables.
trainDataset <- cbind(trainSubjectIDs, trainActivityIDs, trainData)
testDataset <- cbind(testSubjectIDs, testActivityIDs, testData)
fullDataset <- rbind(trainDataset, testDataset)
#}
grep("mean()", featuresIndex)
grep("mean()", featuresIndex$features)
meanStdDataset <- select(fullDataset, contains("mean()") | contains("std()"))
meanStdDataset <- select(fullDataset, contains("mean()"))
View(meanStdDataset)
View(fullDataset)
View(meanStdDataset)
View(fullDataset)
names(fullDataset)
head(names(fullDataset))
View(featuresIndex)
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id()-", "labels"),
stringsAsFactors = FALSE)[2]
View(activityIndex)
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels()-"),
stringsAsFactors = FALSE)[2]
View(activityIndex)
meanStdDataset <- select(fullDataset, contains("mean"))
View(meanStdDataset)
grep("mean", featuresIndex$features)
grep("mean()", featuresIndex$features)
length(grep("mean()", featuresIndex$features))
View(meanStdDataset)
length(grep("mean", featuresIndex$features))
length(grep("mean", featuresIndex$features, ignore.case = TRUE))
grep("mean", featuresIndex$features, ignore.case = TRUE)
grep("std", featuresIndex$features, ignore.case = TRUE)
length(grep("std", featuresIndex$features, ignore.case = TRUE))
meanStdDataset <- select(fullDataset, contains("mean"), contains("std"))
meanStdDataset <- select(fullDataset, 1:2, contains("mean"), contains("std"))
View(meanStdDataset)
a <- 1:3
b <- 4:6
rbind(a, b)
cbind(a, b)
c(a, b)
meanIndex <- grep("mean", featuresIndex$features, ignore.case = TRUE)
stdIndex <- grep("std", featuresIndex$features, ignore.case = TRUE)
indexes <- sort(c(1:2, meanIndex, stdIndex))
meanStdDataset <- select(fullDataset, indexes)
a + 1
meanIndex <- grep("mean", featuresIndex$features, ignore.case = TRUE)
stdIndex <- grep("std", featuresIndex$features, ignore.case = TRUE)
indexes <- sort(c(1:2, meanIndex + 2, stdIndex + 2))
meanStdDataset <- select(fullDataset, indexes)
meanIndex <- grep("mean", featuresIndex$features, ignore.case = TRUE) + 2
stdIndex <- grep("std", featuresIndex$features, ignore.case = TRUE) + 2
indexes <- sort(c(1:2, meanIndex, stdIndex))
meanStdDataset <- select(fullDataset, indexes)
names(meanStdDataset)
View(meanStdDataset)
View(fullDataset)
View(meanStdDataset)
meanStdDataset$activityID <- activityIndex[meanStdDataset$activityID]
activityIndex[1]
meanStdDataset$activityID <- activityIndex[meanStdDataset$activityID, 1]
View(meanStdDataset)
meanStdDataset <- select(fullDataset, indexes)
View(meanStdDataset)
meanStdDataset$activityID <- activityIndex[meanStdDataset$activityID, 1]
rename(meanStdDataset, activity = activityID)
View(meanStdDataset)
meanStdDataset <- rename(meanStdDataset, activity = activityID)
View(meanStdDataset)
View(meanStdDataset)
meanStdDataset <- rename(meanStdDataset, activity = activityID)
#run_analysis <- function()
#{
library(plyr)
library(dplyr)
##############################################################################
# STEP 0) READING DATA
##############################################################################
# PART I - READING COMMON DATA (index files for features and activity labels)
dataFolder <- "UCI HAR Dataset"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
# Index vectors for both features (column names for measurements) and
# activities (row names for activity IDs). In both cases, we discard the
# first column (the numbers) and keep only the second (the labels themselves).
featuresIndex <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"),
stringsAsFactors = FALSE)[2]
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"),
stringsAsFactors = FALSE)[2]
#-----------------------------------------------------------------------------
# PART II - READING TRAINING DATA (subject IDs, activity IDs and measurements)
trainSubjectsFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
trainFolder <- file.path(dataFolder, "train")
# List of subject IDs for training data. One subject ID per row.
trainSubjectIDs <- read.table(file.path(trainFolder, trainSubjectsFile),
col.names = "subject")
# List of activity IDs for training data. One activity ID per row.
trainActivityIDs <- read.table(file.path(trainFolder, yTrainFile),
col.names = "activity")
# Training measurements (the 'core' of the training data).
trainData <- read.table(file.path(trainFolder, trainDataFile),
col.names = featuresIndex$features)
#-----------------------------------------------------------------------------
# PART III - READING TEST DATA (subject IDs, activity IDs and measurements)
testSubjectsFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
testFolder <- file.path(dataFolder, "test")
# List of subject IDs for test data. One subject ID per row.
testSubjectIDs <- read.table(file.path(testFolder, testSubjectsFile),
col.names = "subject")
# List of activity IDs for test data. One activity ID per row.
testActivityIDs <- read.table(file.path(testFolder, yTestFile),
col.names = "activityID")
# Test measurements (the 'core' of the test data).
testData <- read.table(file.path(testFolder, testDataFile),
col.names = featuresIndex$features)
##############################################################################
# STEP 1) MERGE THE TRAINING AND TEST SETS TO CREATE ONE DATA SET.
##############################################################################
# We don't need to use 'merge()' at all here. A simple 'cbind()' should do the
# trick, since we are only assembling tables.
trainDataset <- cbind(trainSubjectIDs, trainActivityIDs, trainData)
testDataset <- cbind(testSubjectIDs, testActivityIDs, testData)
fullDataset <- rbind(trainDataset, testDataset)
##############################################################################
# STEP 2) EXTRACT ONLY THE MEASUREMENTS ON THE MEAN AND STANDARD DEVIATION
#         FOR EACH MEASUREMENT
##############################################################################
# This could be solved with a single command:
#     'select(fullDataSet, 1:2, contains("mean"), contains("std"))'
# but we want to select the columns in the same order as they appear in the
# 'fullDataset' variable. So, instead, we first search the occurrences of
# 'mean' and 'std' in the features index, add the first two columns and sort
# the resulting vestor, before passing it to the 'select()' call.
meanIndex <- grep("mean", featuresIndex$features, ignore.case = TRUE) + 2
stdIndex <- grep("std", featuresIndex$features, ignore.case = TRUE) + 2
indexes <- sort(c(1:2, meanIndex, stdIndex))
meanStdDataset <- select(fullDataset, indexes)
##############################################################################
# STEP 3) USE DESCRIPTIVE ACTIVITY NAMES THE ACTIVITIES IN THE DATA SET
##############################################################################
meanStdDataset$activityID <- activityIndex[meanStdDataset$activityID, 1]
#}
#run_analysis <- function()
#{
library(plyr)
library(dplyr)
##############################################################################
# STEP 0) READING DATA
##############################################################################
# PART I - READING COMMON DATA (index files for features and activity labels)
dataFolder <- "UCI HAR Dataset"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
# Index vectors for both features (column names for measurements) and
# activities (row names for activity IDs). In both cases, we discard the
# first column (the numbers) and keep only the second (the labels themselves).
featuresIndex <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"),
stringsAsFactors = FALSE)[2]
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"),
stringsAsFactors = FALSE)[2]
#-----------------------------------------------------------------------------
# PART II - READING TRAINING DATA (subject IDs, activity IDs and measurements)
trainSubjectsFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
trainFolder <- file.path(dataFolder, "train")
# List of subject IDs for training data. One subject ID per row.
trainSubjectIDs <- read.table(file.path(trainFolder, trainSubjectsFile),
col.names = "subject")
# List of activity IDs for training data. One activity ID per row.
trainActivityIDs <- read.table(file.path(trainFolder, yTrainFile),
col.names = "activity")
# Training measurements (the 'core' of the training data).
trainData <- read.table(file.path(trainFolder, trainDataFile),
col.names = featuresIndex$features)
#-----------------------------------------------------------------------------
# PART III - READING TEST DATA (subject IDs, activity IDs and measurements)
testSubjectsFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
testFolder <- file.path(dataFolder, "test")
# List of subject IDs for test data. One subject ID per row.
testSubjectIDs <- read.table(file.path(testFolder, testSubjectsFile),
col.names = "subject")
# List of activity IDs for test data. One activity ID per row.
testActivityIDs <- read.table(file.path(testFolder, yTestFile),
col.names = "activity")
# Test measurements (the 'core' of the test data).
testData <- read.table(file.path(testFolder, testDataFile),
col.names = featuresIndex$features)
##############################################################################
# STEP 1) MERGE THE TRAINING AND TEST SETS TO CREATE ONE DATA SET.
##############################################################################
# We don't need to use 'merge()' at all here. A simple 'cbind()' should do the
# trick, since we are only assembling tables.
trainDataset <- cbind(trainSubjectIDs, trainActivityIDs, trainData)
testDataset <- cbind(testSubjectIDs, testActivityIDs, testData)
fullDataset <- rbind(trainDataset, testDataset)
##############################################################################
# STEP 2) EXTRACT ONLY THE MEASUREMENTS ON THE MEAN AND STANDARD DEVIATION
#         FOR EACH MEASUREMENT
##############################################################################
# This could be solved with a single command:
#     'select(fullDataSet, 1:2, contains("mean"), contains("std"))'
# but we want to select the columns in the same order as they appear in the
# 'fullDataset' variable. So, instead, we first search the occurrences of
# 'mean' and 'std' in the features index, add the first two columns and sort
# the resulting vestor, before passing it to the 'select()' call.
meanIndex <- grep("mean", featuresIndex$features, ignore.case = TRUE) + 2
stdIndex <- grep("std", featuresIndex$features, ignore.case = TRUE) + 2
indexes <- sort(c(1:2, meanIndex, stdIndex))
meanStdDataset <- select(fullDataset, indexes)
##############################################################################
# STEP 3) USE DESCRIPTIVE ACTIVITY NAMES THE ACTIVITIES IN THE DATA SET
##############################################################################
meanStdDataset$activityID <- activityIndex[meanStdDataset$activityID, 1]
#}
View(meanStdDataset)
meanStdDataset$activity <- activityIndex[meanStdDataset$activity, 1]
View(meanStdDataset)
#run_analysis <- function()
#{
library(plyr)
library(dplyr)
##############################################################################
# STEP 0) READING DATA
##############################################################################
# PART I - READING COMMON DATA (index files for features and activity labels)
dataFolder <- "UCI HAR Dataset"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
# Index vectors for both features (column names for measurements) and
# activities (row names for activity IDs). In both cases, we discard the
# first column (the numbers) and keep only the second (the labels themselves).
featuresIndex <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"),
stringsAsFactors = FALSE)[2]
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"),
stringsAsFactors = FALSE)[2]
#-----------------------------------------------------------------------------
# PART II - READING TRAINING DATA (subject IDs, activity IDs and measurements)
trainSubjectsFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
trainFolder <- file.path(dataFolder, "train")
# List of subject IDs for training data. One subject ID per row.
trainSubjectIDs <- read.table(file.path(trainFolder, trainSubjectsFile),
col.names = "subject")
# List of activity IDs for training data. One activity ID per row.
trainActivityIDs <- read.table(file.path(trainFolder, yTrainFile),
col.names = "activity")
# Training measurements (the 'core' of the training data).
trainData <- read.table(file.path(trainFolder, trainDataFile),
col.names = featuresIndex$features)
#-----------------------------------------------------------------------------
# PART III - READING TEST DATA (subject IDs, activity IDs and measurements)
testSubjectsFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
testFolder <- file.path(dataFolder, "test")
# List of subject IDs for test data. One subject ID per row.
testSubjectIDs <- read.table(file.path(testFolder, testSubjectsFile),
col.names = "subject")
# List of activity IDs for test data. One activity ID per row.
testActivityIDs <- read.table(file.path(testFolder, yTestFile),
col.names = "activity")
# Test measurements (the 'core' of the test data).
testData <- read.table(file.path(testFolder, testDataFile),
col.names = featuresIndex$features)
##############################################################################
# STEP 1) MERGE THE TRAINING AND TEST SETS TO CREATE ONE DATA SET.
##############################################################################
# We don't need to use 'merge()' at all here. A simple 'cbind()' should do the
# trick, since we are only assembling tables.
trainDataset <- cbind(trainSubjectIDs, trainActivityIDs, trainData)
testDataset <- cbind(testSubjectIDs, testActivityIDs, testData)
fullDataset <- rbind(trainDataset, testDataset)
##############################################################################
# STEP 2) EXTRACT ONLY THE MEASUREMENTS ON THE MEAN AND STANDARD DEVIATION
#         FOR EACH MEASUREMENT
##############################################################################
# This could be solved with a single command:
#     'select(fullDataSet, 1:2, contains("mean"), contains("std"))'
# but we want to select the columns in the same order as they appear in the
# 'fullDataset' variable. So, instead, we first search the occurrences of
# 'mean' and 'std' in the features index, add the first two columns and sort
# the resulting vestor, before passing it to the 'select()' call.
meanIndex <- grep("mean", featuresIndex$features, ignore.case = TRUE) + 2
stdIndex <- grep("std", featuresIndex$features, ignore.case = TRUE) + 2
indexes <- sort(c(1:2, meanIndex, stdIndex))
meanStdDataset <- select(fullDataset, indexes)
##############################################################################
# STEP 3) USE DESCRIPTIVE ACTIVITY NAMES THE ACTIVITIES IN THE DATA SET
##############################################################################
meanStdDataset$activity <- activityIndex[meanStdDataset$activity, 1]
#}
