hp$4
hp
hp[4]
hp[1]
hp["4"]
hp$4
hp["4"] - hp["8"]
hp[3] - hp[8]
hp[3] - hp[1]
source('~/OneDrive/Coursera/Data Science Specialization/R Programming/Week 3/Programming Assignment/makeVector.R')
vector <- 1:10
makeVector(vector)
data <- makeVector(vector)
data$get()
data$getmean()
cachemean(data)
cachemean(data)
source('~/OneDrive/Coursera/Data Science Specialization/R Programming/Week 3/Programming Assignment/makeVector.R')
cachemean(data)
data <- makeVector(vector)
data$getmean()
cachemean(data)
cachemean(data)
m <- matrix(c(4, 3, 3, 2), nrow = 2, ncol = 2)
View(m)
solve(m)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
matrix  <- makeCacheMatrix(m)
matrix$get()
cacheSolve(matrix)
cacheSolve(matrix)
cacheSolve(matrix)
m <- matrix(1:4, nrow = 2, ncol = 2)
View(m)
matrix  <- makeCacheMatrix(m)
matrix$get()
cacheSolve(matrix)
View(m)
m <- matrix(c(1, 3, 2, 4), nrow = 2, ncol = 2)
View(m)
matrix$set(m)
matrix$get()
cacheSolve(matrix)
cacheSolve(matrix)
cacheSolve(matrix)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m <- matrix(c(4, 3, 3, 2), nrow = 2, ncol = 2)
View(m)
matrix <- makeCacheMatrix()
matrix$get()
matrix$set(m)
matrix$get()
matrix$getInverse()
cacheSolve(matrix)
cacheSolve(matrix)
m <- matrix(c(1, 3, 2, 4), nrow = 2, ncol = 2)
View(m)
matrix$set(m)
matrix$get()
matrix$get
matrix$get()
matrix$getInverse()
cacheSolve(matrix)
cacheSolve(matrix)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m <- matrix(c(4, 3, 3, 2), nrow = 2, ncol = 2)
matrix$get()
cacheSolve(matrix)
makeCacheMatrix(m)
matrix <- makeCacheMatrix(m)
matrix$get()
makeCacheMatrix(m)
cacheSolve(matrix)
cacheSolve(matrix)
cacheSolve(matrix)
cacheSolve(matrix)
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c (0, 10)
c(1, 2, 3, 4) + c (0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir  <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", TRUE)
library(httr)
oauth_endpoints("github")
source('~/OneDrive/Coursera/Data Science Specialization/03 - Getting and Cleaning Data/Week 2/Quiz/Question 1.R')
question1()
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "6267d03dcbc633e59405",
secret = "7b0f72dc81e91fe6882218ce6f0dfa64a8a83a6d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
source('~/OneDrive/Coursera/Data Science Specialization/03 - Getting and Cleaning Data/Week 2/Quiz/Question 1.R')
question1()
install.packages("httpuv")
question1()
source('~/OneDrive/Coursera/Data Science Specialization/03 - Getting and Cleaning Data/Week 2/Quiz/Question 1.R')
data <- question1()
content(data)
c <- content(data)
d <- fromJSON(toJSON(c))
library(jsonlite)
d <- fromJSON(toJSON(c))
View(d)
row <- match("datasharing", d$name)
date <- d[row, d$created_at]
date <- d[row, "created_at"]
source('~/OneDrive/Coursera/Data Science Specialization/03 - Getting and Cleaning Data/Week 2/Quiz/Question 1.R')
question1()
source('~/OneDrive/Coursera/Data Science Specialization/03 - Getting and Cleaning Data/Week 2/Quiz/Question 1.R')
question1()
library(sqldf)
install.packages("sqldf")
library(sqldf)
a <- NA
a > 1
a < 1
a == NA
is.na(a)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
diabetes <- factor(diabetes)
library(swirl)
packageVersion("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
520
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
sys.frame()
x <- sys.frame()
sys.frames
sys.frames()
source('~/GitHub/GCDCourseProject/run_analysis.R')
run_analysis
run_analysis()
source('~/GitHub/GCDCourseProject/run_analysis.R')
run_analysis()
source('~/GitHub/GCDCourseProject/run_analysis.R')
run_analysis()
source('~/GitHub/GCDCourseProject/run_analysis.R')
run_analysis()
setwd("~/GitHub/GCDCourseProject")
setwd("~/GitHub/GCDCourseProject")
source('~/GitHub/GCDCourseProject/run_analysis.R')
dataFolder <- "UCI HAR Dataset"
testFolder <- "test"
trainFolder <- "train"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
subjectTestFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
subjectTrainFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
data <- read.table(file.path(dataFolder, featuresFile))
View(data)
dataFolder <- "UCI HAR Dataset"
testFolder <- "test"
trainFolder <- "train"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
subjectTestFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
subjectTrainFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
features <- read.table(file.path(dataFolder, featuresFile))[, 2]
dataFolder <- "UCI HAR Dataset"
testFolder <- "test"
trainFolder <- "train"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
subjectTestFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
subjectTrainFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
features <- read.table(file.path(dataFolder, featuresFile))[2]
View(features)
View(data)
View(features)
dataFolder <- "UCI HAR Dataset"
testFolder <- "test"
trainFolder <- "train"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
subjectTestFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
subjectTrainFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
features <- read.table(file.path(dataFolder, featuresFile))[2]
activityLabels <- read.table(file.path(dataFolder, activityLabelsFile))[2]
View(activityLabels)
testSubjects <- read.table(file.path(dataFolder, testFolder, subjectTestFile))
View(testSubjects)
testActivities <- read.table(file.path(dataFolder, testFolder, yTestFile))
View(features)
colnames(features) <- "features"
View(testActivities)
View(features)
View(testActivities)
View(features)
View(testActivities)
View(activityLabels)
features <- read.table(file.path(dataFolder, featuresFile),
col.names = "features")
activityLabels <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = "labels")
View(features)
View(activityLabels)
features <- read.table(file.path(dataFolder, featuresFile),
col.names = "features", header = FALSE)
features <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"))
View(features)
testSubjects <- read.table(file.path(dataFolder, testFolder, subjectTestFile),
col.names = "subject")
testActivities <- read.table(file.path(dataFolder, testFolder, yTestFile),
col.names = "activityID")
View(testActivities)
View(testSubjects)
mergedActivities <- merge(activityLabels, testActivities, by.x = "id",
by.y = "activityID")
activityLabels <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"))
View(activityLabels)
mergedActivities <- merge(activityLabels, testActivities, by.x = "id",
by.y = "activityID")
View(mergedActivities)
mergedActivities <- merge(activityLabels, testActivities, by.x = "id",
by.y = "activityID", sort = FALSE)
View(mergedActivities)
View(mergedActivities)
mergedActivities <- merge(testActivities, activityLabels, by.x = "activityID",
by.y = "id", sort = FALSE)
View(mergedActivities)
features <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"))
activityLabels <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"))
#-----------------------------------------------------------------------------
# TEST DATA
testSubjects <- read.table(file.path(dataFolder, testFolder, subjectTestFile),
col.names = "subject")
testActivities <- read.table(file.path(dataFolder, testFolder, yTestFile),
col.names = "activityID")
mergedActivities <- merge(testActivities, activityLabels, by.x = "activityID",
by.y = "id", sort = FALSE)
# Folder names that will be used to form file paths.
dataFolder <- "UCI HAR Dataset"
testFolder <- "test"
trainFolder <- "train"
#-----------------------------------------------------------------------------
# Helper variables containing file Names.
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
subjectTestFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
subjectTrainFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
#-----------------------------------------------------------------------------
# Create features and activity labels.
features <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"))
activityLabels <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"))
#-----------------------------------------------------------------------------
# TEST DATA
testSubjects <- read.table(file.path(dataFolder, testFolder, subjectTestFile),
col.names = "subject")
testActivities <- read.table(file.path(dataFolder, testFolder, yTestFile),
col.names = "activityID")
mergedActivities <- merge(testActivities, activityLabels, by.x = "activityID",
by.y = "id", sort = FALSE)
View(activityLabels)
View(testActivities)
View(mergedActivities)
View(mergedActivities)
library(plyr)
install.packages("plyr")
library(plyr)
testSubjects <- read.table(file.path(dataFolder, testFolder, subjectTestFile),
col.names = "subject")
testActivities <- read.table(file.path(dataFolder, testFolder, yTestFile),
col.names = "id")
mergedActivities <- join(testActivities, activityLabels, by = "id")
View(mergedActivities)
View(activityLabels)
trainSubjects <- read.table(trainDir, col.names = "subject")
run_analysis <- function()
# Folder names that will be used to form file paths.
dataFolder <- "UCI HAR Dataset"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
features <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"))
activityLabels <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"))
#-----------------------------------------------------------------------------
# TEST DATA
testFolder <- "test"
subjectTestFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
testDir <- file.path(dataFolder, testFolder)
testSubjects <- read.table(file.path(testDir, subjectTestFile),
col.names = "subject")
testActivities <- read.table(file.path(testDir, yTestFile),
col.names = "id")
mergedTestActivities <- join(testActivities, activityLabels, by = "id")
#-----------------------------------------------------------------------------
# TRAIN DATA
trainFolder <- "train"
subjectTrainFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
trainDir <- file.path(dataFolder, trainFolder)
trainSubjects <- read.table(file.path(trainDir, subjectTrainFile),
col.names = "subject")
trainActivities <- read.table(file.path(trainDir, yTrainFile),
col.names = "id")
mergedTrainActivities <- join(trainActivities, activityLabels, by = "id")
View(mergedTestActivities)
View(trainActivities)
View(mergedTrainActivities)
run_analysis <- function()
{
# PREPARATION STEP 1: LOADING OF COMMON DATA
dataFolder <- "UCI HAR Dataset"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
# Loading of the features index table.
featuresIndex <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"))
# Loading of the activity label index table.
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"))
#-----------------------------------------------------------------------------
# PREPARATION STEP 2: LOADING OF TEST DATA
testSubjectsFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
testFolder <- file.path(dataFolder, "test")
# Loading of the list of subjects for test data. One subject per row.
testSubjectIDs <- read.table(file.path(testFolder, testSubjectsFile),
col.names = "subject")
# Loading of the test activity IDs. One activity ID per row.
testActivityIDs <- read.table(file.path(testFolder, yTestFile),
col.names = "id")
# Merging of the test activity IDs vector with the activity index. We use
# 'join()' instead of 'merge()' in this case because we want to preserve the
# order of the 'testActivityIDs' rows.
testActivitiesMap <- join(testActivityIDs, activityIndex, by = "id")
#-----------------------------------------------------------------------------
# PREPARATION STEP 3: LOADING OF TRAIN DATA
trainSubjectsFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
trainFolder <- file.path(dataFolder, "train")
# Loading of the list of subjects for train data. One subject per row.
trainSubjectIDs <- read.table(file.path(trainFolder, trainSubjectsFile),
col.names = "subject")
# Loading of the train activity IDs. One activity ID per row.
trainActivityIDs <- read.table(file.path(trainFolder, yTrainFile),
col.names = "id")
# Merging of the test activity IDs vector with the activity index. We use
# 'join()' instead of 'merge()' in this case because we want to preserve the
# order of the 'testActivityIDs' rows.
trainActivitiesMap <- join(trainActivityIDs, activityIndex, by = "id")
}
# PREPARATION STEP 1: LOADING OF COMMON DATA
dataFolder <- "UCI HAR Dataset"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
# Loading of the features index table.
featuresIndex <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"))
# Loading of the activity label index table.
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"))
#-----------------------------------------------------------------------------
# PREPARATION STEP 2: LOADING OF TEST DATA
testSubjectsFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
testFolder <- file.path(dataFolder, "test")
# Loading of the list of subjects for test data. One subject per row.
testSubjectIDs <- read.table(file.path(testFolder, testSubjectsFile),
col.names = "subject")
# Loading of the test activity IDs. One activity ID per row.
testActivityIDs <- read.table(file.path(testFolder, yTestFile),
col.names = "id")
# Merging of the test activity IDs vector with the activity index. We use
# 'join()' instead of 'merge()' in this case because we want to preserve the
# order of the 'testActivityIDs' rows.
testActivitiesMap <- join(testActivityIDs, activityIndex, by = "id")
#-----------------------------------------------------------------------------
# PREPARATION STEP 3: LOADING OF TRAIN DATA
trainSubjectsFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
trainFolder <- file.path(dataFolder, "train")
# Loading of the list of subjects for train data. One subject per row.
trainSubjectIDs <- read.table(file.path(trainFolder, trainSubjectsFile),
col.names = "subject")
# Loading of the train activity IDs. One activity ID per row.
trainActivityIDs <- read.table(file.path(trainFolder, yTrainFile),
col.names = "id")
# Merging of the test activity IDs vector with the activity index. We use
# 'join()' instead of 'merge()' in this case because we want to preserve the
# order of the 'testActivityIDs' rows.
trainActivitiesMap <- join(trainActivityIDs, activityIndex, by = "id")
View(activityIndex)
View(featuresIndex)
View(testSubjectIDs)
View(testActivitiesMap)
View(testActivityIDs)
View(trainSubjectIDs)
View(trainActivityIDs)
View(trainActivitiesMap)
