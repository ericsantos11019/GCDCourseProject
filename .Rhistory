newColumnNames <- gsub(".", "", newColumnNames, fixed = TRUE)
columnNames
newColumnNames
newColumnNames <- columnNames
newColumnNames <- gsub("mean", "Mean", newColumnNames, fixed = TRUE)
newColumnNames <- gsub("std", "Std", newColumnNames, fixed = TRUE)
newColumnNames <- gsub(".", "", newColumnNames, fixed = TRUE)
newColumnNames <- sub("f", "FreqDomain", newColumnNames, fixed = TRUE)
newColumnNames <- sub("t", "TimeDomain", newColumnNames, fixed = TRUE)
newColumnNames
startswith
library(stringi)
stri_startswith_fixed(columnNames, "a")
stri_startswith_fixed(columnNames, "t")
columnNames
columnNames <- colnames(meanStdDataset)
newColumnNames <- columnNames
newColumnNames <- gsub("mean", "Mean", newColumnNames, fixed = TRUE)
newColumnNames <- gsub("std", "Std", newColumnNames, fixed = TRUE)
newColumnNames <- gsub(".", "", newColumnNames, fixed = TRUE)
newColumnNames <- sub("f", "FreqDomain", newColumnNames[stri_startswith_fixed(newColumnNames, "f")], fixed = TRUE)
newColumnNames <- sub("f", "TimeDomain", newColumnNames[stri_startswith_fixed(newColumnNames, "t")], fixed = TRUE)
newColumnNames
columnNames
columnNames[stri_startswith_fixed(columnNames, "t")]
columnNames <- colnames(meanStdDataset)
newColumnNames <- columnNames
newColumnNames <- gsub("mean", "Mean", newColumnNames, fixed = TRUE)
newColumnNames <- gsub("std", "Std", newColumnNames, fixed = TRUE)
newColumnNames <- gsub(".", "", newColumnNames, fixed = TRUE)
newColumnNames <- sub("f", "FreqDomain", newColumnNames[stri_startswith_fixed(newColumnNames, "f")], fixed = TRUE)
newColumnNames <- sub("t", "TimeDomain", newColumnNames[stri_startswith_fixed(newColumnNames, "t")], fixed = TRUE)
newColumnNames
columnNames <- colnames(meanStdDataset)
newColumnNames <- columnNames
newColumnNames <- gsub("mean", "Mean", newColumnNames, fixed = TRUE)
newColumnNames <- gsub("std", "Std", newColumnNames, fixed = TRUE)
newColumnNames <- gsub(".", "", newColumnNames, fixed = TRUE)
newColumnNames
newColumnNames[stri_startswith_fixed(newColumnNames, "f")]
newColumnNames
newColumnNames <- sub("f", "FreqDomain", newColumnNames[stri_startswith_fixed(newColumnNames, "f")], fixed = TRUE)
newColumnNames
columnNames <- colnames(meanStdDataset)
newColumnNames <- columnNames
newColumnNames <- gsub("mean", "Mean", newColumnNames, fixed = TRUE)
newColumnNames <- gsub("std", "Std", newColumnNames, fixed = TRUE)
newColumnNames <- gsub(".", "", newColumnNames, fixed = TRUE)
newColumnNames[stri_startswith_fixed(newColumnNames, "f")] <- sub("f", "FreqDomain", newColumnNames[stri_startswith_fixed(newColumnNames, "f")], fixed = TRUE)
newColumnNames
columnNames <- colnames(meanStdDataset)
newColumnNames <- columnNames
newColumnNames <- gsub("mean", "Mean", newColumnNames, fixed = TRUE)
newColumnNames <- gsub("std", "Std", newColumnNames, fixed = TRUE)
newColumnNames <- gsub(".", "", newColumnNames, fixed = TRUE)
f <- stri_startswith_fixed(newColumnNames, "f")
t <- stri_startswith_fixed(newColumnNames, "t")
newColumnNames[f] <- sub("f", "FreqDomain", newColumnNames[f], fixed = TRUE)
newColumnNames[t] <- sub("t", "TimeDomain", newColumnNames[t], fixed = TRUE)
newColumnNames
columnNames <- colnames(meanStdDataset)
newColumnNames <- columnNames
newColumnNames <- gsub("mean", "Mean", newColumnNames, fixed = TRUE)
newColumnNames <- gsub("std", "Std", newColumnNames, fixed = TRUE)
newColumnNames <- gsub(".", "", newColumnNames, fixed = TRUE)
f <- stri_startswith_fixed(newColumnNames, "f")
t <- stri_startswith_fixed(newColumnNames, "t")
newColumnNames[f] <- sub("f", "frequency", newColumnNames[f], fixed = TRUE)
newColumnNames[t] <- sub("t", "time", newColumnNames[t], fixed = TRUE)
colnames(meanStdDataset) <- newColumnNames
View(meanStdDataset)
#run_analysis <- function()
#{
library(plyr)
library(dplyr)
library(stringi)
##############################################################################
# STEP 0) READING DATA
##############################################################################
# PART I - READING COMMON DATA (index files for features and activity labels)
dataFolder <- "UCI HAR Dataset"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
# Index vectors for both features (column names for measurements) and
# activities (row names for activity IDs). In both cases, we discard the
# first column (the numbers) and keep only the second (the labels themselves).
featuresIndex <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"),
stringsAsFactors = FALSE)[2]
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"),
stringsAsFactors = FALSE)[2]
#-----------------------------------------------------------------------------
# PART II - READING TRAINING DATA (subject IDs, activity IDs and measurements)
trainSubjectsFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
trainFolder <- file.path(dataFolder, "train")
# List of subject IDs for training data. One subject ID per row.
trainSubjectIDs <- read.table(file.path(trainFolder, trainSubjectsFile),
col.names = "subject")
# List of activity IDs for training data. One activity ID per row.
trainActivityIDs <- read.table(file.path(trainFolder, yTrainFile),
col.names = "activity")
# Training measurements (the 'core' of the training data).
trainData <- read.table(file.path(trainFolder, trainDataFile),
col.names = featuresIndex$features)
#-----------------------------------------------------------------------------
# PART III - READING TEST DATA (subject IDs, activity IDs and measurements)
testSubjectsFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
testFolder <- file.path(dataFolder, "test")
# List of subject IDs for test data. One subject ID per row.
testSubjectIDs <- read.table(file.path(testFolder, testSubjectsFile),
col.names = "subject")
# List of activity IDs for test data. One activity ID per row.
testActivityIDs <- read.table(file.path(testFolder, yTestFile),
col.names = "activity")
# Test measurements (the 'core' of the test data).
testData <- read.table(file.path(testFolder, testDataFile),
col.names = featuresIndex$features)
##############################################################################
# STEP 1) MERGE THE TRAINING AND TEST SETS TO CREATE ONE DATA SET.
##############################################################################
# We don't need to use 'merge()' at all here. A simple 'cbind()' should do the
# trick, since we are only assembling tables.
trainDataset <- cbind(trainSubjectIDs, trainActivityIDs, trainData)
testDataset <- cbind(testSubjectIDs, testActivityIDs, testData)
fullDataset <- rbind(trainDataset, testDataset)
##############################################################################
# STEP 2) EXTRACT ONLY THE MEASUREMENTS ON THE MEAN AND STANDARD DEVIATION
#         FOR EACH MEASUREMENT
##############################################################################
# This could be solved with a single command:
#     'select(fullDataSet, 1:2, contains("mean"), contains("std"))'
# but we want to select the columns in the same order as they appear in the
# 'fullDataset' variable. So, instead, we first search the occurrences of
# 'mean' and 'std' in the features index, add the first two columns and sort
# the resulting vestor, before passing it to the 'select()' call.
columnNames <- colnames(fullDataset)
meanIndex <- grep("mean...", columnNames, fixed = TRUE, ignore.case = TRUE)
stdIndex <- grep("std...", columnNames, fixed = TRUE, ignore.case = TRUE)
indexes <- sort(c(1:2, meanIndex, stdIndex))
meanStdDataset <- select(fullDataset, indexes)
##############################################################################
# STEP 3) USE DESCRIPTIVE ACTIVITY NAMES THE ACTIVITIES IN THE DATA SET
##############################################################################
meanStdDataset$activity <- activityIndex[meanStdDataset$activity, 1]
##############################################################################
# STEP 4) APPROPRIATELY LABEL THE DATASET WITH DESCRIPTIVE VARIABLE NAMES
##############################################################################
columnNames <- colnames(meanStdDataset)
f <- stri_startswith_fixed(newColumnNames, "f")
t <- stri_startswith_fixed(newColumnNames, "t")
newColumnNames[f] <- sub("f", "frequency", newColumnNames[f], fixed = TRUE)
newColumnNames[t] <- sub("t", "time", newColumnNames[t], fixed = TRUE)
newColumnNames <- columnNames
newColumnNames <- gsub("mean", "Mean", newColumnNames, fixed = TRUE)
newColumnNames <- gsub("std", "Std", newColumnNames, fixed = TRUE)
newColumnNames <- gsub(".", "", newColumnNames, fixed = TRUE)
colnames(meanStdDataset) <- newColumnNames
#}
#run_analysis <- function()
#{
library(plyr)
library(dplyr)
library(stringi)
##############################################################################
# STEP 0) READING DATA
##############################################################################
# PART I - READING COMMON DATA (index files for features and activity labels)
dataFolder <- "UCI HAR Dataset"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
# Index vectors for both features (column names for measurements) and
# activities (row names for activity IDs). In both cases, we discard the
# first column (the numbers) and keep only the second (the labels themselves).
featuresIndex <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"),
stringsAsFactors = FALSE)[2]
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"),
stringsAsFactors = FALSE)[2]
#-----------------------------------------------------------------------------
# PART II - READING TRAINING DATA (subject IDs, activity IDs and measurements)
trainSubjectsFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
trainFolder <- file.path(dataFolder, "train")
# List of subject IDs for training data. One subject ID per row.
trainSubjectIDs <- read.table(file.path(trainFolder, trainSubjectsFile),
col.names = "subject")
# List of activity IDs for training data. One activity ID per row.
trainActivityIDs <- read.table(file.path(trainFolder, yTrainFile),
col.names = "activity")
# Training measurements (the 'core' of the training data).
trainData <- read.table(file.path(trainFolder, trainDataFile),
col.names = featuresIndex$features)
#-----------------------------------------------------------------------------
# PART III - READING TEST DATA (subject IDs, activity IDs and measurements)
testSubjectsFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
testFolder <- file.path(dataFolder, "test")
# List of subject IDs for test data. One subject ID per row.
testSubjectIDs <- read.table(file.path(testFolder, testSubjectsFile),
col.names = "subject")
# List of activity IDs for test data. One activity ID per row.
testActivityIDs <- read.table(file.path(testFolder, yTestFile),
col.names = "activity")
# Test measurements (the 'core' of the test data).
testData <- read.table(file.path(testFolder, testDataFile),
col.names = featuresIndex$features)
##############################################################################
# STEP 1) MERGE THE TRAINING AND TEST SETS TO CREATE ONE DATA SET.
##############################################################################
# We don't need to use 'merge()' at all here. A simple 'cbind()' should do the
# trick, since we are only assembling tables.
trainDataset <- cbind(trainSubjectIDs, trainActivityIDs, trainData)
testDataset <- cbind(testSubjectIDs, testActivityIDs, testData)
fullDataset <- rbind(trainDataset, testDataset)
##############################################################################
# STEP 2) EXTRACT ONLY THE MEASUREMENTS ON THE MEAN AND STANDARD DEVIATION
#         FOR EACH MEASUREMENT
##############################################################################
# This could be solved with a single command:
#     'select(fullDataSet, 1:2, contains("mean"), contains("std"))'
# but we want to select the columns in the same order as they appear in the
# 'fullDataset' variable. So, instead, we first search the occurrences of
# 'mean' and 'std' in the features index, add the first two columns and sort
# the resulting vestor, before passing it to the 'select()' call.
columnNames <- colnames(fullDataset)
meanIndex <- grep("mean...", columnNames, fixed = TRUE, ignore.case = TRUE)
stdIndex <- grep("std...", columnNames, fixed = TRUE, ignore.case = TRUE)
indexes <- sort(c(1:2, meanIndex, stdIndex))
meanStdDataset <- select(fullDataset, indexes)
##############################################################################
# STEP 3) USE DESCRIPTIVE ACTIVITY NAMES THE ACTIVITIES IN THE DATA SET
##############################################################################
meanStdDataset$activity <- activityIndex[meanStdDataset$activity, 1]
##############################################################################
# STEP 4) APPROPRIATELY LABEL THE DATASET WITH DESCRIPTIVE VARIABLE NAMES
##############################################################################
columnNames <- colnames(meanStdDataset)
newColumnNames <- columnNames
f <- stri_startswith_fixed(newColumnNames, "f")
t <- stri_startswith_fixed(newColumnNames, "t")
newColumnNames[f] <- sub("f", "frequency", newColumnNames[f], fixed = TRUE)
newColumnNames[t] <- sub("t", "time", newColumnNames[t], fixed = TRUE)
newColumnNames <- gsub("mean", "Mean", newColumnNames, fixed = TRUE)
newColumnNames <- gsub("std", "Std", newColumnNames, fixed = TRUE)
newColumnNames <- gsub(".", "", newColumnNames, fixed = TRUE)
colnames(meanStdDataset) <- newColumnNames
#}
View(meanStdDataset)
View(meanStdDataset)
View(meanStdDataset)
group_by(meanStdDataset, subject, activity)
newDataset <- summarize_each(meanStdDataset, funs(mean))
View(newDataset)
View(meanStdDataset)
newDataset <- summarize_each(meanStdDataset, funs(mean), subject, activity)
View(meanStdDataset)
View(newDataset)
newDataset <- summarize_each(meanStdDataset, funs(mean), -subject, -activity)
View(newDataset)
View(meanStdDataset)
group_by(meanStdDataset, activity, subject)
groupedDataset <- group_by(meanStdDataset, subject, activity)
newDataset <- summarize_each(groupedDataset, funs(mean))
View(groupedDataset)
View(newDataset)
View(meanStdDataset)
groupedDataset <- group_by(meanStdDataset, activity, subject)
newDataset <- summarize_each(groupedDataset, funs(mean))
View(newDataset)
#run_analysis <- function()
#{
library(plyr)
library(dplyr)
library(stringi)
##############################################################################
# STEP 0) READING DATA
##############################################################################
# PART I - READING COMMON DATA (index files for features and activity labels)
dataFolder <- "UCI HAR Dataset"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
# Index vectors for both features (column names for measurements) and
# activities (row names for activity IDs). In both cases, we discard the
# first column (the numbers) and keep only the second (the labels themselves).
featuresIndex <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"),
stringsAsFactors = FALSE)[2]
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"),
stringsAsFactors = FALSE)[2]
#-----------------------------------------------------------------------------
# PART II - READING TRAINING DATA (subject IDs, activity IDs and measurements)
trainSubjectsFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
trainFolder <- file.path(dataFolder, "train")
# List of subject IDs for training data. One subject ID per row.
trainSubjectIDs <- read.table(file.path(trainFolder, trainSubjectsFile),
col.names = "subjectID")
# List of activity IDs for training data. One activity ID per row.
trainActivityIDs <- read.table(file.path(trainFolder, yTrainFile),
col.names = "activity")
# Training measurements (the 'core' of the training data).
trainData <- read.table(file.path(trainFolder, trainDataFile),
col.names = featuresIndex$features)
#-----------------------------------------------------------------------------
# PART III - READING TEST DATA (subject IDs, activity IDs and measurements)
testSubjectsFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
testFolder <- file.path(dataFolder, "test")
# List of subject IDs for test data. One subject ID per row.
testSubjectIDs <- read.table(file.path(testFolder, testSubjectsFile),
col.names = "subjectID")
# List of activity IDs for test data. One activity ID per row.
testActivityIDs <- read.table(file.path(testFolder, yTestFile),
col.names = "activity")
# Test measurements (the 'core' of the test data).
testData <- read.table(file.path(testFolder, testDataFile),
col.names = featuresIndex$features)
##############################################################################
# STEP 1) MERGE THE TRAINING AND TEST SETS TO CREATE ONE DATA SET.
##############################################################################
# We don't need to use 'merge()' at all here. A simple 'cbind()' should do the
# trick, since we are only assembling tables.
trainDataset <- cbind(trainSubjectIDs, trainActivityIDs, trainData)
testDataset <- cbind(testSubjectIDs, testActivityIDs, testData)
fullDataset <- rbind(trainDataset, testDataset)
##############################################################################
# STEP 2) EXTRACT ONLY THE MEASUREMENTS ON THE MEAN AND STANDARD DEVIATION
#         FOR EACH MEASUREMENT
##############################################################################
# This could be solved with a single command:
#     'select(fullDataSet, 1:2, contains("mean"), contains("std"))'
# but we want to select the columns in the same order as they appear in the
# 'fullDataset' variable. So, instead, we first search the occurrences of
# 'mean' and 'std' in the features index, add the first two columns and sort
# the resulting vestor, before passing it to the 'select()' call.
columnNames <- colnames(fullDataset)
meanIndex <- grep("mean...", columnNames, fixed = TRUE, ignore.case = TRUE)
stdIndex <- grep("std...", columnNames, fixed = TRUE, ignore.case = TRUE)
indexes <- sort(c(1:2, meanIndex, stdIndex))
meanStdDataset <- select(fullDataset, indexes)
##############################################################################
# STEP 3) USE DESCRIPTIVE ACTIVITY NAMES THE ACTIVITIES IN THE DATA SET
##############################################################################
meanStdDataset$activity <- activityIndex[meanStdDataset$activity, 1]
##############################################################################
# STEP 4) APPROPRIATELY LABEL THE DATASET WITH DESCRIPTIVE VARIABLE NAMES
##############################################################################
# The thing to have in mind here is that we already set the variable names
# for the dataset using the 'featuresIndex' variable in Step 0, parts II and
# III. By default R will automatically replace any non-alphanumeric character
# or period in a data set header (the variable names) with a period. That
# means all the parenthesis ('(' and ')'), dashes ('-') and commas from the
# variable names have already been stripped by R standard behavior. We only
# need to worry about the dots now.
# First, we read the current variable names.
newColumnNames <- colnames(meanStdDataset)
# Next, we want to find out those variables whose names START with 'f' or 't'
# to change them to more meaningful terms. For that, we use the 'stringi'
# package functions, which facilitate string manipulation in R.
f <- stri_startswith_fixed(newColumnNames, "f")
t <- stri_startswith_fixed(newColumnNames, "t")
# Then we replace those initial 'f's and 't's with 'frequency' and 'time',
# respectively.
newColumnNames[f] <- sub("f", "frequency", newColumnNames[f], fixed = TRUE)
newColumnNames[t] <- sub("t", "time", newColumnNames[t], fixed = TRUE)
# Finally, we finish the cleanup by adjusting capitalization and removing
# dots.
newColumnNames <- gsub("mean", "Mean", newColumnNames, fixed = TRUE)
newColumnNames <- gsub("std", "Std", newColumnNames, fixed = TRUE)
newColumnNames <- gsub(".", "", newColumnNames, fixed = TRUE)
colnames(meanStdDataset) <- newColumnNames
##############################################################################
# STEP 5) CREATE A SECOND, INDEPENDENT TIDY DATA SET WITH THE AVERAGE OF EACH
#         VARIABLE FOR EACH ACTIVITY AND EACH SUBJECT
##############################################################################
groupedDataset <- group_by(meanStdDataset, activity, subject)
newDataset <- summarize_each(groupedDataset, funs(mean))
#}
#run_analysis <- function()
#{
library(plyr)
library(dplyr)
library(stringi)
##############################################################################
# STEP 0) READING DATA
##############################################################################
# PART I - READING COMMON DATA (index files for features and activity labels)
dataFolder <- "UCI HAR Dataset"
activityLabelsFile <- "activity_labels.txt"
featuresFile <- "features.txt"
# Index vectors for both features (column names for measurements) and
# activities (row names for activity IDs). In both cases, we discard the
# first column (the numbers) and keep only the second (the labels themselves).
featuresIndex <- read.table(file.path(dataFolder, featuresFile),
col.names = c("id", "features"),
stringsAsFactors = FALSE)[2]
activityIndex <- read.table(file.path(dataFolder, activityLabelsFile),
col.names = c("id", "labels"),
stringsAsFactors = FALSE)[2]
#-----------------------------------------------------------------------------
# PART II - READING TRAINING DATA (subject IDs, activity IDs and measurements)
trainSubjectsFile <- "subject_train.txt"
trainDataFile <- "X_train.txt"
yTrainFile <- "y_train.txt"
trainFolder <- file.path(dataFolder, "train")
# List of subject IDs for training data. One subject ID per row.
trainSubjectIDs <- read.table(file.path(trainFolder, trainSubjectsFile),
col.names = "subjectID")
# List of activity IDs for training data. One activity ID per row.
trainActivityIDs <- read.table(file.path(trainFolder, yTrainFile),
col.names = "activity")
# Training measurements (the 'core' of the training data).
trainData <- read.table(file.path(trainFolder, trainDataFile),
col.names = featuresIndex$features)
#-----------------------------------------------------------------------------
# PART III - READING TEST DATA (subject IDs, activity IDs and measurements)
testSubjectsFile <- "subject_test.txt"
testDataFile <- "X_test.txt"
yTestFile <- "y_test.txt"
testFolder <- file.path(dataFolder, "test")
# List of subject IDs for test data. One subject ID per row.
testSubjectIDs <- read.table(file.path(testFolder, testSubjectsFile),
col.names = "subjectID")
# List of activity IDs for test data. One activity ID per row.
testActivityIDs <- read.table(file.path(testFolder, yTestFile),
col.names = "activity")
# Test measurements (the 'core' of the test data).
testData <- read.table(file.path(testFolder, testDataFile),
col.names = featuresIndex$features)
##############################################################################
# STEP 1) MERGE THE TRAINING AND TEST SETS TO CREATE ONE DATA SET.
##############################################################################
# We don't need to use 'merge()' at all here. A simple 'cbind()' should do the
# trick, since we are only assembling tables.
trainDataset <- cbind(trainSubjectIDs, trainActivityIDs, trainData)
testDataset <- cbind(testSubjectIDs, testActivityIDs, testData)
fullDataset <- rbind(trainDataset, testDataset)
##############################################################################
# STEP 2) EXTRACT ONLY THE MEASUREMENTS ON THE MEAN AND STANDARD DEVIATION
#         FOR EACH MEASUREMENT
##############################################################################
# This could be solved with a single command:
#     'select(fullDataSet, 1:2, contains("mean"), contains("std"))'
# but we want to select the columns in the same order as they appear in the
# 'fullDataset' variable. So, instead, we first search the occurrences of
# 'mean' and 'std' in the features index, add the first two columns and sort
# the resulting vestor, before passing it to the 'select()' call.
columnNames <- colnames(fullDataset)
meanIndex <- grep("mean...", columnNames, fixed = TRUE, ignore.case = TRUE)
stdIndex <- grep("std...", columnNames, fixed = TRUE, ignore.case = TRUE)
indexes <- sort(c(1:2, meanIndex, stdIndex))
meanStdDataset <- select(fullDataset, indexes)
##############################################################################
# STEP 3) USE DESCRIPTIVE ACTIVITY NAMES THE ACTIVITIES IN THE DATA SET
##############################################################################
meanStdDataset$activity <- activityIndex[meanStdDataset$activity, 1]
##############################################################################
# STEP 4) APPROPRIATELY LABEL THE DATASET WITH DESCRIPTIVE VARIABLE NAMES
##############################################################################
# The thing to have in mind here is that we already set the variable names
# for the dataset using the 'featuresIndex' variable in Step 0, parts II and
# III. By default R will automatically replace any non-alphanumeric character
# or period in a data set header (the variable names) with a period. That
# means all the parenthesis ('(' and ')'), dashes ('-') and commas from the
# variable names have already been stripped by R standard behavior. We only
# need to worry about the dots now.
# First, we read the current variable names.
newColumnNames <- colnames(meanStdDataset)
# Next, we want to find out those variables whose names START with 'f' or 't'
# to change them to more meaningful terms. For that, we use the 'stringi'
# package functions, which facilitate string manipulation in R.
f <- stri_startswith_fixed(newColumnNames, "f")
t <- stri_startswith_fixed(newColumnNames, "t")
# Then we replace those initial 'f's and 't's with 'frequency' and 'time',
# respectively.
newColumnNames[f] <- sub("f", "frequency", newColumnNames[f], fixed = TRUE)
newColumnNames[t] <- sub("t", "time", newColumnNames[t], fixed = TRUE)
# Finally, we finish the cleanup by adjusting capitalization and removing
# dots.
newColumnNames <- gsub("mean", "Mean", newColumnNames, fixed = TRUE)
newColumnNames <- gsub("std", "Std", newColumnNames, fixed = TRUE)
newColumnNames <- gsub(".", "", newColumnNames, fixed = TRUE)
colnames(meanStdDataset) <- newColumnNames
##############################################################################
# STEP 5) CREATE A SECOND, INDEPENDENT TIDY DATA SET WITH THE AVERAGE OF EACH
#         VARIABLE FOR EACH ACTIVITY AND EACH SUBJECT
##############################################################################
groupedDataset <- group_by(meanStdDataset, activity, subjectID)
newDataset <- summarize_each(groupedDataset, funs(mean))
#}
View(newDataset)
source('~/GitHub/GCDCourseProject/run_analysis.R')
run_analysis()
source('~/GitHub/GCDCourseProject/run_analysis.R')
run_analysis()
dataset  <- run_analysis()
dataset  <- run_analysis()
run_analysis()
source('~/GitHub/GCDCourseProject/run_analysis.R')
dataset  <- run_analysis()
View(dataset)
